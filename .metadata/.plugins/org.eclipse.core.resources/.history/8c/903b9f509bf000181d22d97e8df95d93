
package services;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import domain.Application;
import domain.Category;
import domain.FixUpTask;

@Service
@Transactional
public class FixUpTaskService {

	// MANAGED REPOSITORY ---------------

	@Autowired
	private FixUpTaskService		fixUpTaskRepository;

	// SUPPORTING SERVICES -------------

	//	@Autowired
	//	private ActorService			actorService;

	//	@Autowired
	//	private HandyWorkerService		handyWorkerService;

	@Autowired
	private ConfigurationService	configurationService;

	@Autowired
	private CategoryService			categoryService;


	//	@Autowired
	//	private AdministratorService	administratorService;

	//	@Autowired
	//	private ApplicationService		applicationService;

	// Constructor

	public FixUpTaskService() {
		super();
	}

	// Simple CRUD Methods

	public FixUpTask create() {
		final FixUpTask f;
		Collection<Application> apps;
		//		final Collection<HandyWorker> handyWorkers;
		//		Collection<Note> notes;
		//		Collection<Sponsorship> sponsorships;

		f = new FixUpTask();
		apps = new ArrayList<>();
		//		handyWorkers = new ArrayList<>();
		//		notes = new ArrayList<>();
		//		sponsorships = new ArrayList<>();

		f.setApplications(apps);
		//		f.setHandyWorkers(handyWorkers);
		//		f.setStatus("ACTIVE");
		//	f.setNotes(notes);
		//	f.setSponsorships(sponsorships);
		f.setTicker(this.getTicker());

		return f;
	}

	public FixUpTask save(final FixUpTask fixUpTask) {
		Assert.notNull(fixUpTask);
		Assert.isTrue(fixUpTask.getPublicationDate().after(new Date(System.currentTimeMillis() - 24 * 3600 * 1000l)));
		Assert.isTrue(fixUpTask.getStartDate().after(new Date(System.currentTimeMillis())));
		Assert.isTrue(fixUpTask.getEndDate().after(new Date(System.currentTimeMillis())));
		Assert.isTrue(fixUpTask.getPublicationDate().before(fixUpTask.getStartDate()));
		Assert.isTrue(fixUpTask.getPublicationDate().before(fixUpTask.getEndDate()));
		Assert.isTrue(fixUpTask.getStartDate().before(fixUpTask.getEndDate()));
		//	if (fixUpTask.getStatus().equals("CANCELLED"))
		//		Assert.isTrue(!fixUpTask.getCancelReason().isEmpty(), "message.error.cancelReason");

		FixUpTask result;

		//	if (fixUpTask.getStages().size() > 0)
		//	fixUpTask.setPrice(this.getFixUpTaskPrice(fixUpTask));

		result = this.fixUpTaskRepository.save(fixUpTask);

		//	if (result.getStatus().equals("CANCELLED") && result.getApplications() != null)
		//		this.applicationService.cancelApplications(fixUpTask);

		return result;

	}

	// C.10.2
	public Collection<FixUpTask> findAll() {
		Collection<FixUpTask> result;

		result = this.fixUpTaskRepository.findAll();
		Assert.notNull(result);

		return result;
	}

	// C.10.2
	public FixUpTask findOne(final int tripId) {
		FixUpTask result;

		result = this.fixUpTaskRepository.findOne(tripId);

		return result;
	}

	public FixUpTask findOneToEdit(final int tripId) {
		FixUpTask result;

		result = this.fixUpTaskRepository.findOne(tripId);

		//	this.checkPrincipal(result);

		return result;
	}

	// C.12.1 Los que pueden borrar sus trips son los managers
	// El trip no debe haber sido publicado
	/*
	 * public void delete(final Trip trip) {
	 * Assert.notNull(trip);
	 * Assert.isTrue(trip.getId() != 0);
	 * Assert.isTrue(trip.getPublicationDate().after(new Date(System.currentTimeMillis())));
	 * 
	 * // Eliminamos los stages del trip antes de eliminarlo
	 * for (final Stage s : new ArrayList<>(trip.getStages())) {
	 * trip.getStages().remove(s);
	 * this.stageService.delete(s);
	 * }
	 * trip.getLegalText().getTrips().remove(trip);
	 * trip.getRanger().getTrips().remove(trip);
	 * 
	 * final HandyWorker m = (HadnyWorker) this.actorService.findByPrincipal();
	 * m.getFixUpTasks().remove(fixUpTask);
	 * 
	 * this.fixUpTaskRepository.delete(trip);
	 * }
	 */

	// Other Business Methods

	// B.38.5 Un Admin puede mostrar en el dashboard el ratio de fix-up tasks con complaint
	public Double getComplaintFixUpTasks() {
		return this.fixUpTaskRepository.getComplaintFixUpTasks();
	}

	// Tickers se generan automaticamente, con el pattern: YYMMDD-XXXXXX, X es
	// una letra en mayuscula

	public String getTicker() {
		String res = "";
		final Calendar c = Calendar.getInstance();

		String day = Integer.toString(c.get(Calendar.DATE));
		if (day.length() == 1)
			day = "0" + day;
		String month = Integer.toString(c.get(Calendar.MONTH) + 1); // +1 ya que Enero corresponde al valor 0

		if (month.length() == 1)
			month = "0" + month;
		String year = Integer.toString(c.get(Calendar.YEAR));

		// Por el patron solo necesitamos las ultimas 2 cifras del anho
		year = year.substring(2, 4);

		// Aqui obtengo las 4 letras mayusculas
		final Random r = new Random();
		final String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

		final int index1 = r.nextInt(alphabet.length());
		final int index2 = r.nextInt(alphabet.length());
		final int index3 = r.nextInt(alphabet.length());
		final int index4 = r.nextInt(alphabet.length());

		res = year + month + day + "-" + alphabet.charAt(index1) + alphabet.charAt(index2) + alphabet.charAt(index3) + alphabet.charAt(index4);

		// Compruebo que el ticker sea único
		// Si existe algún ticker igual, vuelvo a calcularlo

		for (final FixUpTask t : this.fixUpTaskRepository.findAll())
			if (t.getTicker().equals(res))
				res = this.getTicker();
		return res;
	}

	public Collection<FixUpTask> getFixUpTasksByCategory(final int categoryId) {

		return this.fixUpTaskRepository.getFixUpTasksByCategory(categoryId);
	}

	public Integer getAcceptedApplicationsByHandyWorkerId(final int handyWorkerId, final int fixUpTaskId) {

		return this.fixUpTaskRepository.getAcceptedApplicationsByHandyWorkerId(handyWorkerId, fixUpTaskId);
	}

	// C.11.2 Buscar trips por palabra clave, que debe estar contenida en
	// su ticker, description o address

	public Collection<FixUpTask> getFixUpTasksByKeyWord(final String keyWord) {
		Assert.notNull(keyWord);

		Collection<FixUpTask> res;
		res = this.fixUpTaskRepository.getFixUpTasksByKeyWord(keyWord);
		return res;
	}

	// C.12.5 Un Administrador muestra un Dashboard con estas estadisticas: 

	//The average, the minimum, the maximum, and the standard deviation of the 
	//number of fix-up tasks per user.
	public Double[] computeAvgMinMaxStdvPerUser() {

		return this.fixUpTaskRepository.computeAvgMinMaxStdvPerUser();
	}

	//The average, the minimum, the maximum, and the standard deviation 
	//of the maximum price of the fix-up tasks.

	public Double[] computeAvgMinMaxStdvPerMaxPrice() {

		return this.fixUpTaskRepository.computeAvgMinMaxStdvPerMaxPrice();
	}

	public Collection<FixUpTask> getNotPublishedFixUpTaks() {
		return this.fixUpTaskRepository.getNotPublishedFixUpTaks();
	}

	public Collection<FixUpTask> getHandyWorkerApplicationFixUpTasks(final int handyWorkerId) {
		return this.fixUpTaskRepository.getHandyWorkerApplicationFixUpTasks(handyWorkerId);
	}

	public Collection<FixUpTask> getVisibleFixUpTasks() {
		return this.fixUpTaskRepository.getVisibleFixUpTasks();
	}

	public Collection<FixUpTask> getWithoutApplicationFixUpTasks(final int handyWorkerId) {
		final Collection<FixUpTask> handyWorkerFixUpTasks;
		Collection<FixUpTask> allFixUpTasks;

		handyWorkerFixUpTasks = this.fixUpTaskRepository.getHandyWorkerApplicationFixUpTasks(handyWorkerId);
		allFixUpTasks = this.fixUpTaskRepository.getVisibleFixUpTasks();

		allFixUpTasks.removeAll(handyWorkerFixUpTasks);

		return allFixUpTasks;
	}

	public Boolean checkFixUpTaskIsPublished(final FixUpTask fixUpTask) {
		Boolean isPublished = false;

		if (fixUpTask.getPublicationDate().before(new Date(System.currentTimeMillis())))
			isPublished = true;

		return isPublished;
	}

	public Collection<FixUpTask> getEndedFixUpTasks() {

		return this.fixUpTaskRepository.getEndedFixUpTasks();

	}

	public Collection<FixUpTask> FixUpTask() {
	
		return this.fixUpTaskRepository.getVisibleAndActiveFixUpTasks();
	}

	public Collection<FixUpTask> getVisibleTripsByCategory(final int categoryId) {
		return this.fixUpTaskRepository.getVisibleTripsByCategory(categoryId);
	}

	public Collection<FixUpTask> showAllFixUpTaskByCategory(final int categoryId, final Collection<FixUpTask> result) {

		Category category;

		category = this.categoryService.findOne(categoryId);

		if (!category.getChildCategories().isEmpty())
			for (final Category c : category.getChildCategories())
				this.showAllFixUpTaskByCategory(c.getId(), result);

		result.addAll(this.getVisibleTripsByCategory(categoryId));

		return result;
	}

	public FixUpTask getTripByApplicationId(final int applicationId) {
		return this.fixUpTaskRepository.getTripByApplicationId(applicationId);
	}

	public Collection<FixUpTask> getTripsByManagerId(final int managerId) {
		return this.fixUpTaskRepository.getTripsByManagerId(managerId);
	}

	/*-------------------------------------------------------------------------

	
	// C.3 Algunos trips podrán ser cancelados después de la fecha de
	// publicación,
	// en cuyo caso el sistema deberá almacenar el motivo.
	public void cancelTripAferPublication(final FixUpTask fixUpTask, final String cancelReason) {
		Assert.notNull(fixUpTask);
		Assert.isTrue(fixUpTask.getId() != 0);
		Assert.isTrue(fixUpTask.getPublicationDate().before(new Date(System.currentTimeMillis())));
		//		trip.setStatus("CANCELLED");
		//	fixUpTask.setCancelReason(cancelReason);
	}

	public Collection<FixUpTask> findTripsBySearchCriteria(Double minPrice, Double maxPrice, Date startDate, Date endDate, String keyword) {

		final Collection<FixUpTask> fixUpTasks;

		if (minPrice == null)
			minPrice = 0.;

		if (maxPrice == null)
			maxPrice = 999999.;

		if (startDate == null) {
			startDate = new Date();
			final String startDateString = "06/06/1000";
			final DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			try {
				startDate = df.parse(startDateString);
			} catch (final ParseException e) {
				e.printStackTrace();
			}
		}

		if (endDate == null) {
			endDate = new Date();
			final String endDateString = "06/06/3000";
			final DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			try {
				endDate = df.parse(endDateString);
			} catch (final ParseException e) {
				e.printStackTrace();
			}
		}

		if (keyword == null)
			keyword = "";

		fixUpTasks = this.fixUpTaskRepository.findTripsBySearchCriteria(minPrice, maxPrice, startDate, endDate, keyword);
		List<FixUpTask> tripsSet = new ArrayList<FixUpTask>(fixUpTasks);

		// Si el número de resultados el mayor del indicado en Configuration,
		// creamos
		// una sublista con ese número de resultados
		if (fixUpTasks.size() > this.configurationService.getConfiguration().getFinderReturn())
			tripsSet = tripsSet.subList(0, this.configurationService.getConfiguration().getFinderReturn());
		return tripsSet;
	}

	
	/*
	 * public Page<FixUpTask> getTripsByManagerIdPageable(final int managerId, final Integer pageNumber, final Integer pageSize) {
	 * final PageRequest request = new PageRequest(pageNumber - 1, pageSize);
	 * return this.fixUpTaskRepository.getTripsByManagerIdPageable(request, managerId);
	 * }
	 */

	public Collection<FixUpTask> getAcceptedTrips(final int explorerId) {
		return this.fixUpTaskRepository.getAcceptedTrips(explorerId);
	}

	public Collection<FixUpTask> getTripsExplorerApplication(final int explorerId) {
		return this.fixUpTaskRepository.getTripsExplorerApplication(explorerId);
	}

	/*
	 * public void checkPrincipal(final FixUpTask f) {
	 * final HandyWorker h;
	 * 
	 * if (f.getStatus().equals("CANCELLED"))
	 * Assert.isTrue(false);
	 * 
	 * m = (Manager) this.actorService.findByPrincipal();
	 * 
	 * Assert.isTrue(m.getTrips().contains(t));
	 * }
	 */

	/*
	 * public FixUpTask saveFromCreate(final FixUpTask fixUpTask) {
	 * Assert.notNull(trip);
	 * Assert.isTrue(trip.getPublicationDate().after(new Date(System.currentTimeMillis() - 24 * 3600 * 1000l)), "message.error.publicationDate");
	 * Assert.isTrue(trip.getStartDate().after(new Date(System.currentTimeMillis())), "message.error.startDate");
	 * Assert.isTrue(trip.getEndDate().after(new Date(System.currentTimeMillis())), "message.error.endDate");
	 * Assert.isTrue(trip.getPublicationDate().before(trip.getStartDate()), "message.error.startDatePubliDate");
	 * Assert.isTrue(trip.getPublicationDate().before(trip.getEndDate()), "message.error.endDatePubliDate");
	 * Assert.isTrue(trip.getStartDate().before(trip.getEndDate()), "message.error.startDateEndDate");
	 * 
	 * Trip result;
	 * Manager m;
	 * Collection<Trip> trips;
	 * 
	 * m = (Manager) this.actorService.findByPrincipal();
	 * trips = m.getTrips();
	 * 
	 * result = this.tripRepository.save(trip);
	 * trips.add(result);
	 * m.setTrips(trips);
	 * this.managerService.save(m);
	 * 
	 * if (trip.getLegalText() != null) {
	 * Collection<FixUpTask> ltTrips;
	 * ltTrips = fixUpTask.getLegalText().getTrips();
	 * ltTrips.add(result);
	 * fixUpTask.getLegalText().setTrips(ltTrips);
	 * 
	 * }
	 * 
	 * // final Collection<FixUpTask> rangerTrips = fixUpTask.getRanger().getTrips();
	 * // rangerTrips.add(result);
	 * // fixUpTask.getRanger().setTrips(rangerTrips);
	 * // this.rangerService.save(trip.getRanger());
	 * 
	 * // Comprobamos si es spam
	 * this.administratorService.checkIsSpam(fixUpTask.getDescription());
	 * // this.administratorService.checkIsSpam(fixUpTask.getExplorerRequirements());
	 * // this.administratorService.checkIsSpam(fixUpTask.getCancelReason());
	 * 
	 * return result;
	 * }
	 */

}
