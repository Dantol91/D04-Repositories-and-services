
package services;

import java.util.Collection;
import java.util.List;

import javax.transaction.Transactional;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.util.Assert;

import utilities.AbstractTest;
import domain.Actor;
import domain.Box;
import domain.Message;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {
	"classpath:spring/datasource.xml", "classpath:spring/config/packages.xml"
})
@Transactional
public class MessageServiceTest extends AbstractTest {

	@Autowired
	private MessageService	messageService;
	@Autowired
	private ActorService	actorService;


	@Test
	public void SearchMessage() {
		final Collection<Message> messages = this.messageService.findAll();

		final Message message = this.messageService.findOne(1692);

		System.out.println("Message" + message.getSender());
		Assert.isTrue(messages.contains(message));

	}

	@Test
	public void testDeleteMessageFromTrashBox() {
		this.authenticate("customer1");
		List<Message> messages;
		messages = (List<Message>) this.messageService.findAll();
		final Message message = messages.get(0);

		System.out.println("Message: " + message.getId());
		this.authenticate(null);

	}


	@Test
	public void DeleteMessage() {

		final Message message = this.messageService.findOne(1692);
		this.messageService.delete(message);
	}

	//------------------
	
	@Test
	public void testCreate() {
		int folderId =this.getEntityId("folder1");
		final Folder f = this.folderService.findOne(folderId);
		final Message m = this.messageService.create(f);
		Assert.notNull(m);
	}

	@Test
	public void testFindOneCorrecto() {
		Message m;
		final int idBusqueda = super.getEntityId("message1");
		m = this.messageService.findOne(idBusqueda);
		Assert.notNull(m);
	}

	@Test(expected = IllegalArgumentException.class)
	public void testFindOneIncorrecto() {
		Message m;
		final int idBusqueda = super.getEntityId("mesageh");
		m = this.messageService.findOne(idBusqueda);
		Assert.isNull(m);
	}

	@Test
	public void testFindAll() {
		Collection<Message> messages;

		messages = this.messageService.findAll();
		Assert.notNull(messages);
		Assert.notEmpty(messages);
	}

	@Test
	public void saveTestCorrecto() {
		Message m, saved;
		final int mId = this.getEntityId("message1");
		m = this.messageService.findOne(mId);
		Assert.notNull(m);

		m.setSubject("uwu");
		saved = this.messageService.save(m);
		Assert.isTrue(saved.getSubject().equals("uwu"));
	}
	
	
}
