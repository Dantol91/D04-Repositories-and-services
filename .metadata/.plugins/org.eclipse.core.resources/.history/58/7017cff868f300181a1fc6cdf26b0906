
package services;

import java.util.ArrayList;
import java.util.Collection;

import javax.transaction.Transactional;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.util.Assert;

import utilities.AbstractTest;
import domain.Box;
import domain.Message;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {
	"classpath:spring/datasource.xml", "classpath:spring/config/packages.xml"
})
@Transactional
public class BoxServiceTest extends AbstractTest {

	// Service under test
	@Autowired
	private BoxService	boxService;


	@Test
	public void testCreateBox() {
		this.authenticate("customer1");
		Box b = null;
		b = this.boxService.create();
		Assert.notNull(b);
		this.authenticate(null);
	}

	@Test
	public void testSaveBox() {
		this.authenticate("handyWorker1");
		final Box box;
		Box saved;
		final Collection<Box> boxes;
		box = this.boxService.create();
		box.setName("box-1");
		saved = this.boxService.save(box);
		boxes = this.boxService.findAll();
		Assert.isTrue(boxes.contains(saved));
		this.authenticate(null);
	}

	@Test
	public void testDeleteBox() {
		this.authenticate("customer1");
		final Box box;
		Box saved;
		final Collection<Box> boxes;
		box = this.boxService.create();
		box.setName("box-1");
		saved = this.boxService.save(box);
		this.boxService.delete(saved);
		boxes = this.boxService.findAll();
		Assert.isTrue(!boxes.contains(saved));

	}

	@Test
	public void createSaveDelete() {
		this.authenticate("customer1");
		Box b;
		final Box boxSaved;
		final Collection<Message> messages = new ArrayList<>();
		b = this.boxService.create();
		Assert.notNull(b);

		// Probamos save
		b.setName("name");
		b.setMessages(messages);
		boxSaved = this.boxService.save(b);
		final Integer boxSavedId = boxSaved.getId();
		Assert.isTrue(this.boxService.findOne(boxSavedId).equals(boxSaved));

		// Probamos delete
		this.boxService.delete(boxSaved);
		//	final Box b2 = this.boxService.findOne(boxSavedId);
		Assert.isTrue(this.boxService.findOne(boxSavedId) == null);
	}

	//--------------------------------------------------------------------

	@Test
	public void testCreate() {
		super.authenticate("HandyWorker1");
		final Box box;
		box = this.boxService.create();
		Assert.notNull(box);
		super.unauthenticate();
	}

	@Test
	public void testSave() {
		super.authenticate("sponsor1");
		final Box box;
		final Box boxSaved;

		box = this.boxService.findOne(super.getEntityId("box20"));

		box.setName("amigos box");
		box.setSystemBox(false);

		boxSaved = this.boxService.save(box);

		Assert.notNull(boxSaved);
		super.unauthenticate();
	}

	@Test
	public void testDelete() {
		super.authenticate("sponsor1");
		final Box box;
		box = this.boxService.findOne(super.getEntityId("box17"));
		Assert.notNull(box);
		this.boxService.delete(box);
		super.unauthenticate();
	}

	@Test
	public void testFindAll() {
		Collection<Box> boxs;
		boxs = this.boxService.findAll();
		Assert.notEmpty(boxs);
		Assert.notNull(boxs);

	}

	@Test
	public void testFindOne() {
		Box box;
		box = this.boxService.findOne(super.getEntityId("box23"));
		Assert.notNull(box);

	}

}
