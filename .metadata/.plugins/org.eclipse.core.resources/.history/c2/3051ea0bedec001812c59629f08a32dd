
package services;

import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.SocialProfileRepository;
import domain.Actor;

@Service
@Transactional
public class SocialProfileService {

	// Managed repository 

	@Autowired
	private SocialProfileRepository	socialProfileRepository;

	@Autowired
	private ActorService			actorService;
	@Autowired
	private AdministratorService	administratorService;


	// Constructors

	public SocialProfileService() {
		super();
	}

	// Simple CRUD methods 
	public SocialIdentity create() {
		SocialIdentity result;
		result = new SocialIdentity();

		result.setNick("");
		result.setSocialNetworkName("");
		result.setPhotoUrl("");
		result.setProfileLink("");

		result.setActor(this.actorService.findByPrincipal());
		return result;
	}

	public SocialIdentity save(final SocialIdentity socialIdentity) {
		Assert.notNull(socialIdentity);
		socialIdentity.setActor(this.actorService.findByPrincipal());

		SocialIdentity result;

		result = this.socialIdentityRepository.save(socialIdentity);

		// Comprobamos si es spam
		this.administratorService.checkIsSpam(socialIdentity.getNick());
		this.administratorService.checkIsSpam(socialIdentity.getPhotoUrl());
		this.administratorService.checkIsSpam(socialIdentity.getProfileLink());
		this.administratorService.checkIsSpam(socialIdentity.getSocialNetworkName());

		return result;
	}

	public void delete(final SocialIdentity socialIdentity) {
		Assert.notNull(socialIdentity);
		Assert.isTrue(socialIdentity.getId() != 0);
		Assert.isTrue(this.socialIdentityRepository.exists(socialIdentity.getId()));

		this.socialIdentityRepository.delete(socialIdentity);
	}

	public void delete(final Iterable<SocialIdentity> socialIdentities) {
		Assert.notNull(socialIdentities);
		this.socialIdentityRepository.delete(socialIdentities);
	}

	public SocialIdentity findOne(final int socialIdentityId) {
		Assert.notNull(socialIdentityId);
		Assert.isTrue(socialIdentityId != 0);

		SocialIdentity result;

		result = this.socialIdentityRepository.findOne(socialIdentityId);

		return result;
	}

	public SocialIdentity findOneToEdit(final int socialIdentityId) {
		Assert.notNull(socialIdentityId);
		Assert.isTrue(socialIdentityId != 0);

		SocialIdentity result;

		result = this.socialIdentityRepository.findOne(socialIdentityId);

		this.checkPrincipal(result);

		return result;
	}

	public Collection<SocialIdentity> findAll() {
		Collection<SocialIdentity> result;

		result = this.socialIdentityRepository.findAll();
		Assert.notNull(result);

		return result;
	}

	public void addToPrincipal(final SocialIdentity socialIdentity) {
		final Actor actor = this.actorService.findByPrincipal();
		actor.getSocialIdentities().add(socialIdentity);

	}

	//Other business methods

	//	public String checkPrincipal(Actor prin) {
	//		String res = "";
	//
	//		for (Authority au : prin.getUserAccount().getAuthorities()) {
	//			if (au.getAuthority().equals("ADMIN")) {
	//				res = "redirect:/actor/admin/admin/edit.do";
	//			} else if (au.getAuthority().equals("EXPLORER")) {
	//				res = "redirect:/actor/admin/explorer/edit.do";
	//			} else if (au.getAuthority().equals("RANGER")) {
	//				res = "redirect:/actor/admin/ranger/edit.do";
	//			} else if (au.getAuthority().equals("SPONSOR")) {
	//				res = "redirect:/actor/admin/sponsor/edit.do";
	//			} else if (au.getAuthority().equals("MANAGER")) {
	//				res = "redirect:/actor/admin/manager/edit.do";
	//			} else if (au.getAuthority().equals("AUDITOR")) {
	//				res = "redirect:/actor/admin/auditor/edit.do";
	//			}
	//		}
	//
	//		return res;
	//	}

	public void checkPrincipal(final SocialIdentity sc) {
		Actor a;

		a = this.actorService.findByPrincipal();

		Assert.isTrue(a.getSocialIdentities().contains(sc));
	}

}
